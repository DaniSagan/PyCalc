#   
*   util.ee
*   Author: Daniel Fern√°ndez Villanueva
#

#   Function for  
*   Executes the function .fn for each element of .list #
[   ["list" "fn"] def
    list abs "size" def
    0 "k" def
    [list k get] fn cat [k ++ "k" def] cat [k size <] while
] "for" fun


#   Function map  
*   Executes the function .fn for each element of .list
*   and returns a list of the results #
[   ["list" "fn"] def
    list abs "size" def
    0 "k" def
    [list k get] fn cat [k ++ "k" def] cat [k size <] while
    size npack
] "map" fun


#   Function range  
*   Creates a list of integers from 0 to .n #
[   "n" def
    0 "k" def
    []
    #[k . ++ "k" def][k n <] while#
    [k pack cat k ++ "k" def][k n <] while
    #n npack#
] "integer:range" fun


#   Function list:*
*   #
[   ["n" "ll"] def
    ll
    n 1 - range 
    [..] ll pack cat [cat] cat 
    for
] "list:*" fun

   
#   Function is_prime  
*   Returns true if the number .n is prime, and false otherwise #
[   "n" def
    n 1 <= [false ret] if
    2 "k" def
    n real 0.5 pow _ "lim" def
    [   n k % 0 = [false ret] if 
        k 1 + "k" def
    ][k lim <=] while
    true
] "integer:is_prime" fun


#   Function factor  
*   Returns a list of the prime factors of the number .n #
[   "n" def
    2 "k" def
    [] "res" def
    [   n k % 0 =
        [   n k // "n" def 
            res k pack cat "res" def
        ][  k ++ "k" def
        ] ifelse
    ][n 1 !=] while
    res
] "integer:factor" fun


#   Function gcd
*   Returns the greatest common divisor of the numbers n1 and n2 #
[   ["n1" "n2"] def
    n1 n2 = [n1 ret] if
    n1 1 = n2 1 = or [1 ret] if
    n1 n2 > [n1 n2 - n2 gcd][n2 n1 - n1 gcd] ifelse
] "integer:gcd" fun


#   Function zip
*   Returns a zipped list of the two lists l1 and l2    #
[   ["l1" "l2"] def
    l1 abs l2 abs != [ret] if
    l1 abs "size" def
    0 "k" def
    []
    [[l1] k lget [l2] k lget 2 npack pack cat k ++ "k" def] [k size <] while
] "list:zip" fun


#   Function nzip
*   Returns a zipped list of the list of lists on top of the stack    #
[   "ll" def
    ll abs "nlists" def
    [ll] 0 lget abs "size" def
    0 "k" def
    []
    [   0 "j" def 
        [] 
        [   [ll] j lget 
            k get pack cat
            j ++ "j" def
        ] [j nlists <] while 
        pack
        cat
        k ++ "k" def        
    ][k size <] while
] "list:nzip" fun


#   Funtion contains
*   Returns true if the list contains the value #
[   ["value" "list"] def
    false
    list value pack [= [.. true ret] if] cat for
] "list:contains" fun


#   Function list:sum
*   Returns the sum of all the elements in the list #
[   "l" def
    0
    l [+] for
] "list:sum" fun


#   Function list:prod
*   Returns the product of all the elements in the list #
[   "l" def
    1
    l [*] for
] "list:prod" fun


#   Function list:cartesian_prod
*   Returns the cartesian product of two lists #
[   ["l1" "l2"] def
    l1 abs "size1" def
    l2 abs "size2" def
    0 "x" def
    [   0 "y" def
        [   [l1] x lget [l2] y lget 2 npack
            y ++ "y" def
        ][y size2 <] while
        x ++ "x" def
    ][x size1 <] while
    size1 size2 * npack
] "list:cartesian_prod" fun

#   End of file   #
