["numerator" "denominator"] [simplify] "rational" type


[   "q" def
    q:numerator "n" def
    q:denominator "d" def
    n d * 0 <
    [   n abs neg "n" def d abs "d" def
    ][  n abs "n" def d abs "d" def
    ] ifelse
    n abs d gcd "g" def
    n g // "q:numerator" def
    d g // "q:denominator" def
    q
] "rational:simplify" fun


[   ["q1" "q2"] def
    q1:numerator "n1" def    
    q1:denominator "d1" def
    q2:numerator "n2" def    
    q2:denominator "d2" def
    n1 d2 * n2 d1 * +
    d1 d2 *
    rational
] "rational:+" fun


[   "q" def
    q:numerator neg "n" def
    q n "numerator" set
] "rational:neg" fun


[   ["q1" "q2"] def
    q1 q2 neg +
] "rational:-" fun


[   ["q1" "q2"] def
    q1:numerator "n1" def    
    q1:denominator "d1" def
    q2:numerator "n2" def    
    q2:denominator  "d2" def
    n1 n2 *
    d1 d2 *
    rational
] "rational:*" fun


[   "q" def
    q:numerator "n" def
    q:denominator "d" def
    d n rational
] "rational:inv" fun


[   ["q1" "q2"] def
    q1 q2 inv *
] "rational:/" fun


[   "r" def
    r:numerator print
    "/" print
    r:denominator print
] "rational:print" fun
