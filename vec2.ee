["x" "y"][] "vec2" type

[   [".v1" ".v2"] def 
    .v1 "x" get .v2 "x" get +
    .v1 "y" get .v2 "y" get +
    vec2 
] "vec2:+" fun

[   [".v1" ".v2"] def 
    .v1 "x" get .v2 "x" get -
    .v1 "y" get .v2 "y" get -
    vec2 
] "vec2:-" fun

[   ".v1" def 
    .v1 "x" get 2.0 pow
    .v1 "y" get 2.0 pow
    + 0.5 pow 
] "vec2:abs" fun

[   ".v" def
    .v "y" get
    .v "x" get
    atan2
] "vec2:arg" fun

[   [".ang" ".v"] def
    .v "x" get .ang cos *
    .v "y" get .ang sin *
    -
    .v "x" get .ang sin *
    .v "y" get .ang cos *
    +
    vec2
] "vec2:rot" fun

[   ".v1" def 
    .v1 "x" get print
    " " print
    .v1 "y" get print
] "vec2:print" fun

[   [".v1" ".v2"] def 
    .v1 "x" get .v2 "x" get *
    .v1 "y" get .v2 "y" get *
    + 
] "vec2:dot" fun

[   [".t1" ".v2"] def
    [.t1 .v2 "x" get * .t1 .v2 "y" get * vec2 ret] .t1 who "number" = if
    [.t1 .v2 dot ret] .t1 who "object.vec2" = if   
] "vec2:*" fun

[   ".v" def
    .v abs ".l" def
    .v "x" get .l /
    .v "y" get .l /
    vec2
] "vec2:unit" fun


